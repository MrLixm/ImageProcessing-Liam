"""
Module that will parse the data dir and generate the python file automatically.
"""
import logging
import sys
from typing import List, Tuple

import pixelDataTesting as pxdt
from pixelDataTesting.containers import TestAsset


logger = logging.getLogger(f"{pxdt.c.ABR}.autoGenerate")


def setup_logging(level):

    logger = logging.getLogger(pxdt.c.ABR)
    logger.setLevel(level)

    if not logger.handlers:
        # create a file handler
        handler = logging.StreamHandler(stream=sys.stdout)
        handler.setLevel(logging.DEBUG)
        # create a logging format
        formatter = logging.Formatter(
            "%(asctime)s - [%(levelname)7s] %(name)30s // %(message)s",
            datefmt="%H:%M:%S",
        )
        handler.setFormatter(formatter)
        # add the file handler to the logger
        logger.addHandler(handler)

    return logger


def update_init_file():
    init_path = pxdt.c.PACKAGE_DIR / "__init__.py"
    init_path.write_text(pxdt.config.initContent)
    logger.info(f"[update_init_file] Finished for file {init_path}")
    return


def main():

    logger.info("[main] Started.")

    # .py file content to generate
    file_content = """\"\"\"
Autogenerated file with autoGenerate.py. Do not modify manually !
\"\"\"

from pathlib import Path

from .containers import TestAsset
    
"""

    assets: List[TestAsset] = [
        TestAsset(p) for p in pxdt.c.DATA_DIR.iterdir() if p.is_dir()
    ]

    # generate __all__ variable
    asset_name_list: Tuple[str] = tuple([ta.id for ta in assets])
    file_content += "__all__ = (\n"
    for asset_name in asset_name_list:
        file_content += f'   "{asset_name}",\n'
    file_content += ")\n"

    # generate constants variables
    for asset in assets:
        content = f"""
{asset.id} = TestAsset(
    Path(r"{asset.path.relative_to(pxdt.c.PACKAGE_DIR)}")
)
"""
        file_content += content

    # Write to disk
    pxdt.config.coreFilePath.write_text(file_content, encoding="utf-8")
    logger.info(f"[main] Written file {pxdt.config.coreFilePath}.")

    logger.info("[main] Finished.")
    return


if __name__ == "__main__":

    setup_logging(logging.DEBUG)
    update_init_file()
    main()
